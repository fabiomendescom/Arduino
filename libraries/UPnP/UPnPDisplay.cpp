/*
 * This is a generalization module for visual output / displays.
 * 
 * To be used by the UPnPDisplay, to display status on e.g. SSD1306 based OLED displays.
 * 
 * Copyright (c) 2016 Danny Backx
 * 
 * License (MIT license):
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 * 
 *   The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 * 
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *   THE SOFTWARE.
 */

#include "UPnP/Configuration.h"
#include "UPnP/UPnPDisplay.h"

#define DEBUG Serial

UPnPDisplay::UPnPDisplay()
{
  // Don't print anything here, will crash
  // DEBUG.println("UPnPDisplay CTOR 1");
}

UPnPDisplay::UPnPDisplay(const char *serviceType, const char *serviceId)
{
  DEBUG.println("UPnPDisplay CTOR 2");
  begin();
}

UPnPDisplay::~UPnPDisplay() {
#ifdef DEBUG
  DEBUG.println("UPnPDisplay DTOR");
#endif  
}

// Forward declarations
static void init_OLED(void);
static void sendStrXY( const char *string, int X, int Y);
static void sendCharXY(unsigned char data, int X, int Y);
static void clear_display(void);
static void reset_display(void);
void displayOn(void);
void displayOff(void);
static void sendcommand(unsigned char com);
static void setXY(unsigned char row,unsigned char col);
static void SendChar(unsigned char data);

void UPnPDisplay::begin() {
  if (state != UPNP_DISPLAY_STATE_INVALID)
    return;	// Already been here
  state = UPNP_DISPLAY_STATE_OFF;

  DEBUG.println("UPnPDisplay begin()");
  
  config = new Configuration("Display",
    new ConfigurationItem("message", ""),
    NULL);

  DEBUG.printf("UPnPDisplay ...\n");

  init_OLED();
  reset_display();
  clear_display();

  // Initialize local storage for display
  for (int i=0; i<9; i++) {
    for (int j=0; j<17; j++)
      line[i][j] = ' ';
    line[i][16] = '\0';
  }

  strncpy(line[0], "Alarm : aan", 11);
  // strncpy(line[1], "-=-=-=-=-=-", 11);
  // sprintf(line[2], "%d.%dÂ°C %4d hPa", 1, 2, 3);
  // strncpy(line[4], ".........", 9);
}

void UPnPDisplay::SetLine(int ln, const char *s) {
  if (ln < 0 || ln > 8)
    return;
  strncpy(line[ln], s, 16);
  line[ln][17] = '\0';
}

void UPnPDisplay::periodic() {
  for (int i=0; i<9; i++)
    sendStrXY(line[i], i, 0);
}

// Small 8x8 font
const char myFont[][8] PROGMEM = {
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x20
  {0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},	// 0x21
  {0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},	// 0x22
  {0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},	// 0x23
  {0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},	// 0x24
  {0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},	// 0x25
  {0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},	// 0x26
  {0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},	// 0x27
  {0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},	// 0x28
  {0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},	// 0x29
  {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},	// 0x2A
  {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},	// 0x2B
  {0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},	// 0x2C
  {0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},	// 0x2D
  {0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},	// 0x2E
  {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},	// 0x2F
  {0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00},	// 0x30
  {0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},	// 0x31
  {0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},	// 0x32
  {0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},	// 0x33
  {0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},	// 0x34
  {0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},	// 0x35
  {0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},	// 0x36
  {0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},	// 0x37
  {0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},	// 0x38
  {0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},	// 0x39
  {0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},	// 0x3A
  {0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},	// 0x3B
  {0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},	// 0x3C
  {0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},	// 0x3D
  {0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},	// 0x3E
  {0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},	// 0x3F
  {0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},	// 0x40
  {0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},	// 0x41
  {0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},	// 0x42
  {0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},	// 0x43
  {0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},	// 0x44
  {0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},	// 0x45
  {0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},	// 0x46
  {0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},	// 0x47
  {0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},	// 0x48
  {0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},	// 0x49
  {0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},	// 0x4A
  {0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},	// 0x4B
  {0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},	// 0x4C
  {0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},	// 0x4D
  {0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},	// 0x4E
  {0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},	// 0x4F
  {0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},	// 0x50
  {0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},	// 0x51
  {0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},	// 0x52
  {0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},	// 0x53
  {0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},	// 0x54
  {0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},	// 0x55
  {0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},	// 0x56
  {0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},	// 0x57
  {0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},	// 0x58
  {0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},	// 0x59
  {0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},	// 0x5A
  {0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},	// 0x5B
  {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},	// 0x5C
  {0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},	// 0x5D
  {0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},	// 0x5E
  {0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},	// 0x5F
  {0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},	// 0x60
  {0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},	// 0x61
  {0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},	// 0x62
  {0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},	// 0x63
  {0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},	// 0x64
  {0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},	// 0x65
  {0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},	// 0x66
  {0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},	// 0x67
  {0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},	// 0x68
  {0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},	// 0x69
  {0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},	// 0x6A
  {0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},	// 0x6B
  {0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},	// 0x6C
  {0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},	// 0x6D
  {0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},	// 0x6E
  {0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},	// 0x6F
  {0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},	// 0x70
  {0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},	// 0x71
  {0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},	// 0x72
  {0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},	// 0x73
  {0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},	// 0x74
  {0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},	// 0x75
  {0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},	// 0x76
  {0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},	// 0x77
  {0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},	// 0x78
  {0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},	// 0x79
  {0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},	// 0x7A
  {0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},	// 0x7B
  {0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},	// 0x7C
  {0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},	// 0x7D
  {0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},	// 0x7E
  {0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00},	// 0x7F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x80
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x81
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x82
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x83
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x84
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x85
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x86
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x87
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x88
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x89
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8A
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8B
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8C
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8D
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8E
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x8F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x90
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x91
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x92
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x93
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x94
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x95
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x96
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x97
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x98
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x99
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9A
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9B
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9C
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9D
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9E
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x9F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA0
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA1
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA2
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA3
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA4
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA5
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA6
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA7
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA8
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xA9
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAA
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAB
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAC
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAD
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAE
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xAF
  {0x00,0x00,0x02,0x05,0x02,0x00,0x00,0x00},	// 0xB0
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB1
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB2
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB3
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB4
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB5
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB6
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB7
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB8
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xB9
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xBA
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xBB
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xBC
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xBD
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0xBE
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00} 	// 0xBF
};

#include <Wire.h>

#define offset 0x00    // SDD1306                      // offset=0 for SSD1306 controller
//#define offset 0x02    // SH1106                       // offset=2 for SH1106 controller

#define OLED_address  0x3C                             // all the OLED's I have seen have this address

/*
  handles the messages coming from the webbrowser, restores a few special characters and 
  constructs the strings that can be sent to the oled display
*
void handle_msg() {
  clear_display();                        // clears oled
 
  server.send(200, "text/html", form);    // Send same page so they can send another msg

  // Display msg on Oled
  String msg = server.arg("msg");
  Serial.println(msg);
  String decodedMsg = msg;
  // Restore special characters that are misformed to %char by the client browser
  decodedMsg.replace("+", " ");      
  decodedMsg.replace("%21", "!");  
  decodedMsg.replace("%22", "");  
  decodedMsg.replace("%23", "#");
  decodedMsg.replace("%24", "$");
  decodedMsg.replace("%25", "%");  
  decodedMsg.replace("%26", "&");
  decodedMsg.replace("%27", "'");  
  decodedMsg.replace("%28", "(");
  decodedMsg.replace("%29", ")");
  decodedMsg.replace("%2A", "*");
  decodedMsg.replace("%2B", "+");  
  decodedMsg.replace("%2C", ",");  
  decodedMsg.replace("%2F", "/");   
  decodedMsg.replace("%3A", ":");    
  decodedMsg.replace("%3B", ";");  
  decodedMsg.replace("%3C", "<");  
  decodedMsg.replace("%3D", "=");  
  decodedMsg.replace("%3E", ">");
  decodedMsg.replace("%3F", "?");  
  decodedMsg.replace("%40", "@"); 
  //Serial.println(decodedMsg);                   // print original string to monitor
  unsigned int lengte = decodedMsg.length();      // length of received message
  for  (int i=0;i<lengte;i++)                     // prints up to 8 rows of 16 characters.
    {
      char c = decodedMsg[i];
      Serial.print(c); //decodedMsg[i]);
           if (i<16)  {sendCharXY(c,0,i);}
      else if (i<32)  {sendCharXY(c,1,i-16);}
      else if (i<48)  {sendCharXY(c,2,i-32);}
      else if (i<64)  {sendCharXY(c,3,i-48);}
      else if (i<80)  {sendCharXY(c,4,i-64);}
      else if (i<96)  {sendCharXY(c,5,i-80);}
      else if (i<112) {sendCharXY(c,6,i-96);}
      else if (i<128) {sendCharXY(c,7,i-112);}

    }
  //Serial.println(' ');                          // new line in monitor
}

/* */

//==========================================================//
// Resets display depending on the actual mode.
static void reset_display(void)
{
  displayOff();
  clear_display();
  displayOn();
}

//==========================================================//
// Turns display on.
void displayOn(void)
{
  sendcommand(0xaf);        //display on
}

//==========================================================//
// Turns display off.
void displayOff(void)
{
  sendcommand(0xae);		//display off
}

//==========================================================//
// Clears the display by sendind 0 to all the screen map.
static void clear_display(void)
{
  unsigned char i,k;
  for(k=0;k<8;k++)
  {	
    setXY(k,0);    
    {
      for(i=0;i<(128 + 2 * offset);i++)     //locate all COL
      {
        SendChar(0);         //clear all COL
        //delay(10);
      }
    }
  }
}

//==========================================================//
// Actually this sends a byte, not a char to draw in the display. 
// Display's chars uses 8 byte font the small ones and 96 bytes
// for the big number font.
static void SendChar(unsigned char data) 
{
  //if (interrupt && !doing_menu) return;   // Stop printing only if interrupt is call but not in button functions
  
  Wire.beginTransmission(OLED_address); // begin transmitting
  Wire.write(0x40);//data mode
  Wire.write(data);
  Wire.endTransmission();    // stop transmitting
}

//==========================================================//
// Prints a display char (not just a byte) in coordinates X Y,
// being multiples of 8. This means we have 16 COLS (0-15) 
// and 8 ROWS (0-7).
static void sendCharXY(unsigned char data, int X, int Y)
{
  setXY(X, Y);
  Wire.beginTransmission(OLED_address); // begin transmitting
  Wire.write(0x40);//data mode
  
  for(int i=0;i<8;i++) {
    int off = data - 0x20;
    if (off > sizeof(myFont) / 8)
      Wire.write(pgm_read_byte(i));	// Space
    else
      Wire.write(pgm_read_byte(myFont[off]+i));
  }
    
  Wire.endTransmission();    // stop transmitting
}

//==========================================================//
// Used to send commands to the display.
static void sendcommand(unsigned char com)
{
  Wire.beginTransmission(OLED_address);     //begin transmitting
  Wire.write(0x80);                          //command mode
  Wire.write(com);
  Wire.endTransmission();                    // stop transmitting
}

//==========================================================//
// Set the cursor position in a 16 COL * 8 ROW map.
static void setXY(unsigned char row,unsigned char col)
{
  sendcommand(0xb0+row);                //set page address
  sendcommand(offset+(8*col&0x0f));       //set low col address
  sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}


//==========================================================//
// Prints a string regardless the cursor position.
static void sendStr(unsigned char *string)
{
  unsigned char i=0;
  while(*string)
  {
    for(i=0;i<8;i++)
    {
      SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    }
    *string++;
  }
}

//==========================================================//
// Prints a string in coordinates X Y, being multiples of 8.
// This means we have 16 COLS (0-15) and 8 ROWS (0-7).
static void sendStrXY( const char *string, int X, int Y)
{
  setXY(X,Y);
  unsigned char i=0;
  while(*string)
  {
    for(i=0;i<8;i++)
    {
      SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    }
    *string++;
  }
}


//==========================================================//
// Inits oled and draws logo at startup
static void init_OLED(void)
{
  sendcommand(0xae);		//display off
  sendcommand(0xa6);            //Set Normal Display (default)
    // Adafruit Init sequence for 128x64 OLED module
    sendcommand(0xAE);             //DISPLAYOFF
    sendcommand(0xD5);            //SETDISPLAYCLOCKDIV
    sendcommand(0x80);            // the suggested ratio 0x80
    sendcommand(0xA8);            //SSD1306_SETMULTIPLEX
    sendcommand(0x3F);
    sendcommand(0xD3);            //SETDISPLAYOFFSET
    sendcommand(0x0);             //no offset
    sendcommand(0x40 | 0x0);      //SETSTARTLINE
    sendcommand(0x8D);            //CHARGEPUMP
    sendcommand(0x14);
    sendcommand(0x20);             //MEMORYMODE
    sendcommand(0x00);             //0x0 act like ks0108
    
    //sendcommand(0xA0 | 0x1);      //SEGREMAP   //Rotate screen 180 deg
    sendcommand(0xA0);
    
    //sendcommand(0xC8);            //COMSCANDEC  Rotate screen 180 Deg
    sendcommand(0xC0);
    
    sendcommand(0xDA);            //0xDA
    sendcommand(0x12);           //COMSCANDEC
    sendcommand(0x81);           //SETCONTRAS
    sendcommand(0xCF);           //
    sendcommand(0xd9);          //SETPRECHARGE 
    sendcommand(0xF1); 
    sendcommand(0xDB);        //SETVCOMDETECT                
    sendcommand(0x40);
    sendcommand(0xA4);        //DISPLAYALLON_RESUME        
    sendcommand(0xA6);        //NORMALDISPLAY             

  clear_display();
  sendcommand(0x2e);            // stop scroll
  //----------------------------REVERSE comments----------------------------//
    sendcommand(0xa0);		//seg re-map 0->127(default)
    sendcommand(0xa1);		//seg re-map 127->0
    sendcommand(0xc8);
    delay(1000);
  //----------------------------REVERSE comments----------------------------//
  // sendcommand(0xa7);  //Set Inverse Display  
  // sendcommand(0xae);		//display off
  sendcommand(0x20);            //Set Memory Addressing Mode
  sendcommand(0x00);            //Set Memory Addressing Mode ab Horizontal addressing mode
  //  sendcommand(0x02);         // Set Memory Addressing Mode ab Page addressing mode(RESET)  
}
